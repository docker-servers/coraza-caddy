---

# Docker compose for example for the Coraza WAF
# This example assumes Docker is running in swarm mode
# Traefik will be used as the front end server accepting inbound connections and terminating SSL.
# The Coraza WAF will be used to protect the backend "whoami" service.

version: '3.8'

services:

  ## The "whoami" container
  ## This is the container that the WAF will be protecting
  whoami:
    image: traefik/whoami
    networks:
      - whoami

  ## Coraza WAF running on Caddy
  caddy:
    image: ghcr.io/docker-servers/coraza-caddy/alpine:latest
    depends_on:
      - whoami
    networks:
      - whoami
      - caddy
    environment:
      - REVERSE_PROXY=whoami:80
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=caddy"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.rule=Host(`example.com`,`www.example.com`)"
      - "traefik.http.routers.whoami.service=whoami"
      - "traefik.http.routers.whoami.tls=true"
      - "traefik.http.routers.whoami.tls.certresolver=le-http"
      - "traefik.http.services.whoami.loadbalancer.server.port=80"

  ## Traefik container
  traefik:
    image: traefik:latest
    networks:
      - bridge
      - caddy
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: udp
        mode: host
    command:
      ## Enable debug logs
      #- "--log.level=DEBUG"
      ## Skip telemetry
      - '--global.sendAnonymousUsage=false'
      - '--global.checkNewVersion=false'
      ## Enable ping for health checks to work
      - "--ping"
      ## Enable docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      ## Set inbound connections port for HTTP
      - "--entrypoints.web.address=:80"
      ## Set inbound connections port for HTTPS
      - "--entrypoints.websecure.address=:443"
      ## Enable HTTP3
      - "--experimental.http3=true"
      - "--entrypoints.websecure.http3=true"
      ## Configure LetsEncrypt HTTP01 challenge
      - "--certificatesresolvers.le-http.acme.email=me@example.com"
      - "--certificatesresolvers.le-http.acme.storage=/certificates/certificates.json"
      - "--certificatesresolvers.le-http.acme.keytype=EC384"
      - "--certificatesresolvers.le-http.acme.httpchallenge.entrypoint=web"
    labels:
      ## Enable Traefik for this container to allow for global redirect
      - "traefik.enable=true"
      ## Global redirect to https excluding ACME certificate requests
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=force-https"
      - "traefik.http.middlewares.force-https.redirectscheme.scheme=https"
    volumes:
      ## Docker volume to read labels
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      ## Preserve certificates in volume
      - certificates:/certificates

## Networks used by the above services
networks:
  ## Internal network for Traefik to reach Caddy
  caddy:
    driver: overlay
    internal: true
  ## Internal network for Caddy to reach the whoami service
  whoami:
    driver: overlay
    internal: true
  ## The externally defined bridge network for Traefik to listen for incoming HTTP/HTTPS connections
  bridge:
    external: true

## Volumes used by the above services
volumes:
  ## Certificate store for Traefik
  certificates: